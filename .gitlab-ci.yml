image: docker:20.10.11

services:
  - docker:dind

before_script:
  - apk add --update --no-cache openssh openssh-client
  - export SSH="ssh -l $SWARM_USER -p 22 -o StrictHostKeyChecking=no $SWARM_HOST"
  - eval $(ssh-agent -s);
  - echo "$SWARM_ID_RSA" | tr -d '\r' | ssh-add -
  - $SSH "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  - echo $CI_PIPELINE_SOURCE

after_script:
  - $SSH "docker system prune -a -f"

.deploy_backend:
  script:
    - $SSH "docker pull $BACKEND_IMAGE"
    - $SSH "docker service update odin_backend --image=$BACKEND_IMAGE --replicas=4 --quiet"

.deploy_frontend:
  script:
    - $SSH "docker pull $FRONTEND_IMAGE"
    - $SSH "docker service update odin_frontend --image=$FRONTEND_IMAGE --replicas=1 --quiet"

.deploy_notificator:
  script:
    - $SSH "docker pull $NOTIFICATOR_IMAGE"
    - $SSH "docker service update odin_notificator --image=$NOTIFICATOR_IMAGE --replicas=1 --quiet"

.deploy_cashier:
  script:
    - $SSH "docker pull $CASHIER_IMAGE"
    - $SSH "docker service update odin_cashier --image=$CASHIER_IMAGE --replicas=2 --quiet"

deploy_global:
  script:
    - $SSH "docker pull $BACKEND_IMAGE"
    - $SSH "docker pull $FRONTEND_IMAGE"
    - $SSH "docker pull $NOTIFICATOR_IMAGE"
    - docker context create remote --docker "host=ssh://$SWARM_USER@$SWARM_HOST"
    - docker context use remote
    - unset DOCKER_HOST
    - docker stack deploy odin --compose-file deploy-stack.yml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+$/'
      when: always
    - when: never

deploy_backend:
  script:
    - !reference [.deploy_backend, script]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline" && $CI_TYPE == "back"'
      when: always
    - when: never

deploy_backend_prod:
  script:
    - export SSH="ssh -l $SWARM_USER_PROD -p 22 -o StrictHostKeyChecking=no $SWARM_HOST_PROD"
    - !reference [.deploy_backend, script]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline" && $CI_TYPE == "back"'
      when: manual
    - when: never

deploy_frontend:
  script:
    - !reference [.deploy_frontend, script]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline" && $CI_TYPE == "front"'
      when: always
    - when: never

deploy_frontend_prod:
  script:
    - export SSH="ssh -l $SWARM_USER_PROD -p 22 -o StrictHostKeyChecking=no $SWARM_HOST_PROD"
    - !reference [.deploy_frontend, script]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline" && $CI_TYPE == "front"'
      when: manual
    - when: never

deploy_notificator:
  script:
    - !reference [.deploy_notificator, script]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline" && $CI_TYPE == "notificator"'
      when: always
    - when: never

deploy_notificator_prod:
  script:
    - export SSH="ssh -l $SWARM_USER_PROD -p 22 -o StrictHostKeyChecking=no $SWARM_HOST_PROD"
    - !reference [.deploy_notificator, script]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline" && $CI_TYPE == "notificator"'
      when: manual
    - when: never

deploy_cashier:
  script:
    - !reference [.deploy_cashier, script]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline" && $CI_TYPE == "cashier"'
      when: always
    - when: never

deploy_cashier_prod:
  script:
    - export SSH="ssh -l $SWARM_USER_PROD -p 22 -o StrictHostKeyChecking=no $SWARM_HOST_PROD"
    - !reference [.deploy_cashier, script]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline" && $CI_TYPE == "cashier"'
      when: manual
    - when: never
